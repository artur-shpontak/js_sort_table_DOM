{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tableHead","tHead","tableBody","tBodies","containsNumber","string","test","getNumberFromString","Number","match","join","sortByValue","rows","columnIndex","sort","previousRow","nextRow","previousValue","children","textContent","nextValue","localeCompare","sortColumn","element","selectedColumn","target","cellIndex","bodyRows","append","addEventListener"],"mappings":";AAAA,aAmCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAjCA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAYH,EAAMI,MAClBC,EAAYL,EAAMM,QAAQ,GAEhC,SAASC,EAAeC,GACf,MAAA,KAAKC,KAAKD,GAGnB,SAASE,EAAoBF,GACpBG,OAAAA,OAAOH,EAAOI,MAAM,OAAOC,KAAK,KAGzC,SAASC,EAAYC,EAAMC,GACzBD,EAAKE,KAAK,SAACC,EAAaC,GAChBC,IAAAA,EAAgBF,EAAYG,SAASL,GAAaM,YAClDC,EAAYJ,EAAQE,SAASL,GAAaM,YAEzCf,OAAAA,EAAea,GAClBV,EAAoBU,GAAiBV,EAAoBa,GACzDH,EAAcI,cAAcD,KAIpC,SAASE,EAAWC,GACZC,IACAX,EADiBU,EAAQE,OACIC,UAC7BC,EAAezB,EAAAA,EAAUgB,UAE/BP,EAAYgB,EAAUd,GAEtBX,EAAU0B,OAAV1B,MAAAA,EAAoByB,EAAAA,IAGtB3B,EAAU6B,iBAAiB,QAASP","file":"main.85449e62.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tableHead = table.tHead;\nconst tableBody = table.tBodies[0];\n\nfunction containsNumber(string) {\n  return /\\d/.test(string);\n}\n\nfunction getNumberFromString(string) {\n  return Number(string.match(/\\d/g).join(''));\n}\n\nfunction sortByValue(rows, columnIndex) {\n  rows.sort((previousRow, nextRow) => {\n    const previousValue = previousRow.children[columnIndex].textContent;\n    const nextValue = nextRow.children[columnIndex].textContent;\n\n    return containsNumber(previousValue)\n      ? getNumberFromString(previousValue) - getNumberFromString(nextValue)\n      : previousValue.localeCompare(nextValue);\n  });\n}\n\nfunction sortColumn(element) {\n  const selectedColumn = element.target;\n  const columnIndex = selectedColumn.cellIndex;\n  const bodyRows = [...tableBody.children];\n\n  sortByValue(bodyRows, columnIndex);\n\n  tableBody.append(...bodyRows);\n}\n\ntableHead.addEventListener('click', sortColumn);\n"]}